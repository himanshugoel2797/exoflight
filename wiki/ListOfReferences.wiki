	// logarithm of a quaternion
	// exponent quaternion of a vector
	// from http://www.cs.technion.ac.il/Labs/Isl/projects_done/quaternion/quat_interpol_project.html

// Visit the ACME Labs Java page for up-to-date versions of this and other
// fine Java utilities: http://www.acme.com/java/


			// low-eccentricity formula from Meeus,  p. 195

	// we want YPR (yaw-pitch roll) which is YXZ in our system

	// these algorithms taken from NASA STI #77N26175,
	// "Euler Angles, Quaternions, and Transformations
	// Matrices for Space Shuttle Analysis"
	// But unfortunately, there is an error in page 17,
	// which contains the YXZ transformation that I use.
	// (instead of atan(m31/m33), should be (m13/m33))

		// this is from NASA TR X-58040
		// "Apollo Lunar Descent and Ascent Trajectories"
		// Ac = Ad - (6(V+Vd)/TGO) - (12*(R-Rd)/TGO^2)
		// god knows why it works... :)
		// todo: figure out what god knows

		// azimuth = asin(cos i/cos L)
      // from BMW p. 142


Lambert.java
	solveBattan()
	// Vallado, pgs 441-444

	% * PROGRAMMER: Chris D'Souza
	% *
	% * DATE: January 20, 1989
	% *
	% * VERIFIED BY: Darrel Monroe, 10/25/90

Matrix4d:
	// Taken from Rick's which is taken from Wertz. pg. 412
	// Bug Fixed and changed into right-handed by hiranabe


  * Perturbation for the J2 harmonic.
  * Vallado, pg. 528

  * Perturbation for 3rd body perturbations (besides the primary body).
  * Vallado, pg. 515

  * Constants
  * JGM-2
  * Vallado, pg. 94-96, appendix, various

	  * Simple Newton-method-based solver, from Vallado pg. 232.
	  * Only handles 0 <= ecc < 1

Kepler equation:

			// low-eccentricity formula from Meeus,  p. 195

	public static double solveNearParabolic(double e, double M)
	{
		// series solution
		// Vallado pg 240

		// Vallado p 236
		// solve cubic for parabolic ecc.

		// apply Simpson's correction
		// Peter Colwell, "Solving Kepler's Equation", pg 60

	  * See if two objects (ut1 & ut2) can see each other without being
	  * obstructed by a third object (ut3)
	  * ut1 or ut2 can be null (representing universe origin), but not ut3.
	  * Source: Vallado pg 198-201

			// true argument of latitude (arg of periapsis + true anomoly)
			// Vallado pg 137

IGMProgram:

  * A guidance program that implements a linear parametric
  * guidance algorithm as described in NASA-TM-X-67218,
  * "Project/Space Shuttle - Space shuttle guidance, navigation and
  * control design equations, volume 1"

		// azimuth = asin(cos i/cos L)
      // from BMW p. 142

Heat on structures:
						// Seifert & Brown, p. 458

